version: '3'

vars:
  DEFAULT_GORELEASER_BIN_NAME:
    sh: gh repo view --json name -q ".name"
  DEFAULT_GORELEASER_DOCKER_REGISTRY:
    sh: echo "ghcr.io/$(gh repo view --json owner -q '.owner.login')/$(gh repo view --json name -q '.name')"
  DEFAULT_GORELEASER_SOURCE:
    sh: gh repo view --json url -q ".url"
  DEFAULT_GORELEASER_NAME:
    sh: gh repo view --json name -q ".name"
  DEFAULT_GORELEASER_DISPLAY_NAME: '{{ .DISPLAY_NAME | default "Project Name" }}'
  DEFAULT_GORELEASER_DESCRIPTION: '{{ .DESCRIPTION | default "Project description..." }}'
  DEFAULT_GORELEASER_GITHUB_OWNER:
    sh: gh repo view --json owner -q ".owner.login"
  DEFAULT_GORELEASER_GITHUB_REPOSITORY:
    sh: gh repo view --json name -q ".name"
  DEFAULT_GORELEASER_GITHUBACTION_FILENAME: '{{ .ROOT_DIR }}/.github/workflows/goreleaser.yml'
  DEFAULT_GORELEASER_CONFIG_FILENAME: '{{ .ROOT_DIR }}/.goreleaser.yaml'
  DEFAULT_GORELEASER_DOCKER_CMD: '{{ .DOCKER_CMD | default "[\"serve\"]" }}'
  DEFAULT_GORELEASER_INSTALL_SCRIPT_FILENAME: 'install.sh'

tasks:
  default:
    cmds:
      - task: docker
      - task: boilerplate
      - task: ci
      - task: install-script

  install-script:
    desc: Generate an installation script
    vars:
      INSTALL_SCRIPT_FILENAME: '{{.INSTALL_SCRIPT_FILENAME | default .DEFAULT_GORELEASER_INSTALL_SCRIPT_FILENAME}}'
      GITHUB_OWNER: '{{ .GITHUB_OWNER | default .DEFAULT_GORELEASER_GITHUB_OWNER }}'
      GITHUB_REPOSITORY: '{{ .GITHUB_REPOSITORY | default .DEFAULT_GORELEASER_GITHUB_REPOSITORY }}'
      BIN_NAME: '{{ .BIN_NAME | default .DEFAULT_GORELEASER_BIN_NAME }}'
    cmds:
      - echo "${INSTALL_SCRIPT_CONTENT}" > "{{.INSTALL_SCRIPT_FILENAME}}"
    status:
      - test -f '{{ .INSTALL_SCRIPT_FILENAME }}'
    env:
      INSTALL_SCRIPT_CONTENT: |
        #!/bin/sh
        set -e
        
        usage() {
          this=$1
          cat <<EOF
        $this: download go binaries for {{ .GITHUB_OWNER }}/{{ .GITHUB_REPOSITORY }}
        
        Usage: $this [-b <bindir>] [-d] [<tag>]
          -b sets bindir or installation directory, Defaults to ./bin
          -d turns on debug logging
           <tag> is a tag from
           https://github.com/{{ .GITHUB_OWNER }}/{{ .GITHUB_REPOSITORY }}/releases
           If tag is missing, then the latest will be used.
        
        EOF
          exit 2
        }
        
        parse_args() {
          # BINDIR is ./bin unless set be ENV
          # overridden by flag below
        
          BINDIR=${BINDIR:-./bin}
          while getopts "b:dh?x" arg; do
            case "$arg" in
              b) BINDIR="$OPTARG" ;;
              d) log_set_priority 10 ;;
              h | \?) usage "$0" ;;
              x) set -x ;;
            esac
          done
          shift $((OPTIND - 1))
          TAG=$1
        }
        # this function wraps all the destructive operations
        # if a curl|bash cuts off the end of the script due to
        # network, either nothing will happen or will syntax error
        # out preventing half-done work
        execute() {
          tmpdir=$(mktemp -d)
          log_debug "downloading files into ${tmpdir}"
          http_download "${tmpdir}/${TARBALL}" "${TARBALL_URL}"
          http_download "${tmpdir}/${CHECKSUM}" "${CHECKSUM_URL}"
          hash_sha256_verify "${tmpdir}/${TARBALL}" "${tmpdir}/${CHECKSUM}"
          srcdir="${tmpdir}/${NAME}"
          rm -rf "${srcdir}"
          (cd "${tmpdir}" && untar "${TARBALL}")
          test ! -d "${BINDIR}" && install -d "${BINDIR}"
          for binexe in $BINARIES; do
            if [ "$OS" = "windows" ]; then
              binexe="${binexe}.exe"
            fi
            install "${tmpdir}/${binexe}" "${BINDIR}/"
            log_info "installed ${BINDIR}/${binexe}"
          done
          rm -rf "${tmpdir}"
        }
        get_binaries() {
          case "$PLATFORM" in
            darwin/amd64) BINARIES="{{ .BIN_NAME }}" ;;
            darwin/arm64) BINARIES="{{ .BIN_NAME }}" ;;
            darwin/armv6) BINARIES="{{ .BIN_NAME }}" ;;
            darwin/armv7) BINARIES="{{ .BIN_NAME }}" ;;
            darwin/mips64) BINARIES="{{ .BIN_NAME }}" ;;
            darwin/mips64le) BINARIES="{{ .BIN_NAME }}" ;;
            darwin/ppc64le) BINARIES="{{ .BIN_NAME }}" ;;
            darwin/s390x) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/386) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/amd64) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/armv6) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/armv7) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/mips64) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/mips64le) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/ppc64le) BINARIES="{{ .BIN_NAME }}" ;;
            freebsd/s390x) BINARIES="{{ .BIN_NAME }}" ;;
            illumos/amd64) BINARIES="{{ .BIN_NAME }}" ;;
            linux/386) BINARIES="{{ .BIN_NAME }}" ;;
            linux/amd64) BINARIES="{{ .BIN_NAME }}" ;;
            linux/arm64) BINARIES="{{ .BIN_NAME }}" ;;
            linux/armv6) BINARIES="{{ .BIN_NAME }}" ;;
            linux/armv7) BINARIES="{{ .BIN_NAME }}" ;;
            linux/mips64) BINARIES="{{ .BIN_NAME }}" ;;
            linux/mips64le) BINARIES="{{ .BIN_NAME }}" ;;
            linux/ppc64le) BINARIES="{{ .BIN_NAME }}" ;;
            linux/s390x) BINARIES="{{ .BIN_NAME }}" ;;
            linux/riscv64) BINARIES="{{ .BIN_NAME }}" ;;
            linux/loong64) BINARIES="{{ .BIN_NAME }}" ;;
            netbsd/386) BINARIES="{{ .BIN_NAME }}" ;;
            netbsd/amd64) BINARIES="{{ .BIN_NAME }}" ;;
            netbsd/armv6) BINARIES="{{ .BIN_NAME }}" ;;
            netbsd/armv7) BINARIES="{{ .BIN_NAME }}" ;;
            windows/386) BINARIES="{{ .BIN_NAME }}" ;;
            windows/amd64) BINARIES="{{ .BIN_NAME }}" ;;
            windows/arm64) BINARIES="{{ .BIN_NAME }}" ;;
            windows/armv6) BINARIES="{{ .BIN_NAME }}" ;;
            windows/armv7) BINARIES="{{ .BIN_NAME }}" ;;
            windows/mips64) BINARIES="{{ .BIN_NAME }}" ;;
            windows/mips64le) BINARIES="{{ .BIN_NAME }}" ;;
            windows/ppc64le) BINARIES="{{ .BIN_NAME }}" ;;
            windows/s390x) BINARIES="{{ .BIN_NAME }}" ;;
            *)
              log_crit "platform $PLATFORM is not supported.  Make sure this script is up-to-date and file request at https://github.com/${PREFIX}/issues/new"
              exit 1
              ;;
          esac
        }
        tag_to_version() {
          if [ -z "${TAG}" ]; then
            log_info "checking GitHub for latest tag"
          else
            log_info "checking GitHub for tag '${TAG}'"
          fi
          REALTAG=$(github_release "$OWNER/$REPO" "${TAG}") && true
          if test -z "$REALTAG"; then
            log_crit "unable to find '${TAG}' - use 'latest' or see https://github.com/${PREFIX}/releases for details"
            exit 1
          fi
          # if version starts with 'v', remove it
          TAG="$REALTAG"
          VERSION=${TAG#v}
        }
        adjust_format() {
          # change format (tar.gz or zip) based on OS
          case ${OS} in
            windows) FORMAT=zip ;;
          esac
          true
        }
        adjust_os() {
          # adjust archive name based on OS
          true
        }
        adjust_arch() {
          # adjust archive name based on ARCH
          true
        }
        
        cat /dev/null <<EOF
        ------------------------------------------------------------------------
        https://github.com/client9/shlib - portable posix shell functions
        Public domain - http://unlicense.org
        https://github.com/client9/shlib/blob/master/LICENSE.md
        but credit (and pull requests) appreciated.
        ------------------------------------------------------------------------
        EOF
        is_command() {
          command -v "$1" >/dev/null
        }
        echoerr() {
          echo "$@" 1>&2
        }
        _logp=6
        log_set_priority() {
          _logp="$1"
        }
        log_priority() {
          if test -z "$1"; then
            echo "$_logp"
            return
          fi
          [ "$1" -le "$_logp" ]
        }
        log_tag() {
          case $1 in
            0) echo "emerg" ;;
            1) echo "alert" ;;
            2) echo "crit" ;;
            3) echo "err" ;;
            4) echo "warning" ;;
            5) echo "notice" ;;
            6) echo "info" ;;
            7) echo "debug" ;;
            *) echo "$1" ;;
          esac
        }
        log_debug() {
          log_priority 7 || return 0
          echoerr "$(log_prefix)" "$(log_tag 7)" "$@"
        }
        log_info() {
          log_priority 6 || return 0
          echoerr "$(log_prefix)" "$(log_tag 6)" "$@"
        }
        log_err() {
          log_priority 3 || return 0
          echoerr "$(log_prefix)" "$(log_tag 3)" "$@"
        }
        log_crit() {
          log_priority 2 || return 0
          echoerr "$(log_prefix)" "$(log_tag 2)" "$@"
        }
        uname_os() {
          os=$(uname -s | tr '[:upper:]' '[:lower:]')
          case "$os" in
            msys*) os="windows" ;;
            mingw*) os="windows" ;;
            cygwin*) os="windows" ;;
            win*) os="windows" ;;
            sunos) [ "$(uname -o)" = "illumos" ] && os=illumos ;;
          esac
          echo "$os"
        }
        uname_arch() {
          arch=$(uname -m)
          case $arch in
            x86_64) arch="amd64" ;;
            x86) arch="386" ;;
            i686) arch="386" ;;
            i386) arch="386" ;;
            i86pc) arch="amd64" ;;
            aarch64) arch="arm64" ;;
            armv5*) arch="armv5" ;;
            armv6*) arch="armv6" ;;
            armv7*) arch="armv7" ;;
            loongarch64) arch="loong64" ;;
          esac
          echo "${arch}"
        }
        uname_os_check() {
          os=$(uname_os)
          case "$os" in
            darwin) return 0 ;;
            dragonfly) return 0 ;;
            freebsd) return 0 ;;
            illumos) return 0;;
            linux) return 0 ;;
            android) return 0 ;;
            nacl) return 0 ;;
            netbsd) return 0 ;;
            openbsd) return 0 ;;
            plan9) return 0 ;;
            solaris) return 0 ;;
            windows) return 0 ;;
          esac
          log_crit "uname_os_check '$(uname -s)' got converted to '$os' which is not a GOOS value."
          return 1
        }
        uname_arch_check() {
          arch=$(uname_arch)
          case "$arch" in
            386) return 0 ;;
            amd64) return 0 ;;
            arm64) return 0 ;;
            armv5) return 0 ;;
            armv6) return 0 ;;
            armv7) return 0 ;;
            ppc64) return 0 ;;
            ppc64le) return 0 ;;
            mips) return 0 ;;
            mipsle) return 0 ;;
            mips64) return 0 ;;
            mips64le) return 0 ;;
            s390x) return 0 ;;
            riscv64) return 0 ;;
            amd64p32) return 0 ;;
            loong64) return 0 ;;
          esac
          log_crit "uname_arch_check '$(uname -m)' got converted to '$arch' which is not a GOARCH value."
          return 1
        }
        untar() {
          tarball=$1
          case "${tarball}" in
            *.tar.gz | *.tgz) tar --no-same-owner -xzf "${tarball}" ;;
            *.tar) tar --no-same-owner -xf "${tarball}" ;;
            *.zip) unzip "${tarball}" ;;
            *)
              log_err "untar unknown archive format for ${tarball}"
              return 1
              ;;
          esac
        }
        http_download_curl() {
          local_file=$1
          source_url=$2
          header=$3
        
          # workaround https://github.com/curl/curl/issues/13845
          curl_version=$(curl --version | head -n 1 | awk '{ print $2 }')
          if [ "$curl_version" = "8.8.0" ]; then
            log_debug "http_download_curl curl $curl_version detected"
            if [ -z "$header" ]; then
              curl -sL -o "$local_file" "$source_url"
            else
              curl -sL -H "$header" -o "$local_file" "$source_url"
        
              nf=$(cat "$local_file" | jq -r '.error // ""')
              if  [ ! -z "$nf" ]; then
                log_debug "http_download_curl received an error: $nf"
                return 1
              fi
            fi
        
            return 0
          fi
        
          if [ -z "$header" ]; then
            code=$(curl -w '%{http_code}' -sL -o "$local_file" "$source_url")
          else
            code=$(curl -w '%{http_code}' -sL -H "$header" -o "$local_file" "$source_url")
          fi
          if [ "$code" != "200" ]; then
            log_debug "http_download_curl received HTTP status $code"
            return 1
          fi
          return 0
        }
        http_download_wget() {
          local_file=$1
          source_url=$2
          header=$3
          if [ -z "$header" ]; then
            wget -q -O "$local_file" "$source_url"
          else
            wget -q --header "$header" -O "$local_file" "$source_url"
          fi
        }
        http_download() {
          log_debug "http_download $2"
          if is_command curl; then
            http_download_curl "$@"
            return
          elif is_command wget; then
            http_download_wget "$@"
            return
          fi
          log_crit "http_download unable to find wget or curl"
          return 1
        }
        http_copy() {
          tmp=$(mktemp)
          http_download "${tmp}" "$1" "$2" || return 1
          body=$(cat "$tmp")
          rm -f "${tmp}"
          echo "$body"
        }
        github_release() {
          owner_repo=$1
          version=$2
          test -z "$version" && version="latest"
          giturl="https://github.com/${owner_repo}/releases/${version}"
          json=$(http_copy "$giturl" "Accept:application/json")
          test -z "$json" && return 1
          version=$(echo "$json" | tr -s '\n' ' ' | sed 's/.*"tag_name":"//' | sed 's/".*//')
          test -z "$version" && return 1
          echo "$version"
        }
        hash_sha256() {
          TARGET=${1:-/dev/stdin}
          if is_command gsha256sum; then
            hash=$(gsha256sum "$TARGET") || return 1
            echo "$hash" | cut -d ' ' -f 1
          elif is_command sha256sum; then
            hash=$(sha256sum "$TARGET") || return 1
            echo "$hash" | cut -d ' ' -f 1
          elif is_command shasum; then
            hash=$(shasum -a 256 "$TARGET" 2>/dev/null) || return 1
            echo "$hash" | cut -d ' ' -f 1
          elif is_command openssl; then
            hash=$(openssl -dst openssl dgst -sha256 "$TARGET") || return 1
            echo "$hash" | cut -d ' ' -f a
          else
            log_crit "hash_sha256 unable to find command to compute sha-256 hash"
            return 1
          fi
        }
        hash_sha256_verify() {
          TARGET=$1
          checksums=$2
          if [ -z "$checksums" ]; then
            log_err "hash_sha256_verify checksum file not specified in arg2"
            return 1
          fi
          BASENAME=${TARGET##*/}
          want=$(grep "${BASENAME}" "${checksums}" 2>/dev/null | tr '\t' ' ' | head -n 1 | cut -d ' ' -f 1)
          if [ -z "$want" ]; then
            log_err "hash_sha256_verify unable to find checksum for '${TARGET}' in '${checksums}'"
            return 1
          fi
          got=$(hash_sha256 "$TARGET")
          if [ "$want" != "$got" ]; then
            log_err "hash_sha256_verify checksum for '$TARGET' did not verify ${want} vs $got"
            return 1
          fi
        }
        cat /dev/null <<EOF
        ------------------------------------------------------------------------
        End of functions from https://github.com/client9/shlib
        ------------------------------------------------------------------------
        EOF
        
        PROJECT_NAME="{{ .GITHUB_REPOSITORY }}"
        OWNER={{ .GITHUB_OWNER }}
        REPO="{{ .GITHUB_REPOSITORY }}"
        BINARY={{ .BIN_NAME }}
        FORMAT=tar.gz
        OS=$(uname_os)
        ARCH=$(uname_arch)
        PREFIX="$OWNER/$REPO"
        
        # use in logging routines
        log_prefix() {
            echo "$PREFIX"
        }
        PLATFORM="${OS}/${ARCH}"
        GITHUB_DOWNLOAD=https://github.com/${OWNER}/${REPO}/releases/download
        
        uname_os_check "$OS"
        uname_arch_check "$ARCH"
        
        parse_args "$@"
        
        get_binaries
        
        tag_to_version
        
        adjust_format
        
        adjust_os
        
        adjust_arch
        
        log_info "found version: ${VERSION} for ${TAG}/${OS}/${ARCH}"
        
        NAME=${BINARY}_${VERSION}_${OS}_${ARCH}
        TARBALL=${NAME}.${FORMAT}
        TARBALL_URL=${GITHUB_DOWNLOAD}/${TAG}/${TARBALL}
        CHECKSUM=${PROJECT_NAME}-${VERSION}-checksums.txt
        CHECKSUM_URL=${GITHUB_DOWNLOAD}/${TAG}/${CHECKSUM}
        
        
        execute

  run:
    desc: Run goreleaser
    vars:
      BIN_NAME: '{{ .BIN_NAME | default .DEFAULT_GORELEASER_BIN_NAME }}'
      GORELEASER_ARGS: '{{ .GORELEASER_ARGS | default .DEFAULT_GORELEASER_ARGS }}'
    summary: |
      Run Goreleaser. The purpose is to have a reusable way to run Goreleaser.

      The following variables are available:

      | VARIABLE            | DESCRIPTION               | DEFAULT |
      |---------------------|---------------------------|---------|
      | `GORELEASER_ARGS`   | goreleaser arguments      | `{{ .DEFAULT_GORELEASER_ARGS }}` |

      Usual environment variables used for building a golang application are obviously available like:
        - `GOOS` for setting the build OS
        - `GOARCH` for setting the build architecture

      Extra arguments can be provided using `--` (non exclusive with `GORELEASER_ARGS`).

      Examples:
        - `SOURCES=./cmd/... task {{ .TASK }}` is similar to `goreleaser`
        - `task {{ .TASK }} -- -v` is similar to `goreleaser -v`
        - `GORELEASER_ARGS="-v" task {{ .TASK }}` is similar to `goreleaser -v`

    cmds:
      - aqua exec {{ .BIN_NAME }} {{.GORELEASER_ARGS}} {{.CLI_ARGS}}

  ci:
    desc: Generate GitHub Action
    summary: |
      Generate a standardized goreleaser GitHub Action configuration.
      This configuration is auto-generated and should not be manually modified as it can be overwritten.
      
      The generated files should be excluded from commits.
    vars:
      GITHUBACTION_FILENAME: '{{.GITHUBACTION_FILENAME | default .DEFAULT_GORELEASER_GITHUBACTION_FILENAME}}'
    cmds:
      - mkdir -p $(dirname "{{.GITHUBACTION_FILENAME}}")
      - echo "${GITHUBACTION_CONTENT}" > "{{.GITHUBACTION_FILENAME}}"
    env:
      GITHUBACTION_CONTENT: |
        # THIS FILE HAS BEEN GENERATED BY THE COMMAND `{{.TASK}}`; DO NOT EDIT;
        #
        # Releaser workflow setup
        # https://goreleaser.com/ci/actions/
        #
        name: release
        
        # run only on tags
        on:
          push:
            tags:
              - 'v*'
        
        permissions:
          contents: write # needed to write releases
          id-token: write # needed for keyless signing
          packages: write # needed for ghcr access
        
        jobs:
          release:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v4
                with:
                  fetch-depth: 0 # this is important, otherwise it won't checkout the full tree (i.e. no previous tags)
              - uses: actions/setup-go@v4
                with:
                  go-version: 1.21
                  cache: true
              - uses: sigstore/cosign-installer@v3.2.0         # installs cosign
              - uses: anchore/sbom-action/download-syft@v0.14.3 # installs syft
              - uses: docker/login-action@v3                   # login to ghcr
                with:
                  registry: ghcr.io
                  username: ${{ "{{ github.repository_owner }}" }}
                  password: ${{ "{{ secrets.GITHUB_TOKEN }}" }}
              - uses: goreleaser/goreleaser-action@v5          # run goreleaser
                with:
                  version: latest
                  args: release --clean
                env:
                  GITHUB_TOKEN: ${{ "{{ secrets.GITHUB_TOKEN }}" }}
  docker:
    desc: Generate dockerfile for GoReleaser
    summary: |
      Generate Docker for GoReleaser.
    vars:
      NAME: '{{ .NAME | default .DEFAULT_GORELEASER_NAME }}'
      DOCKER_CMD: '{{ .DOCKER_CMD | default .DEFAULT_GORELEASER_DOCKER_CMD }}'
    cmds:
      - echo "${DOCKERFILE_CONTENT}" > "Dockerfile"

    status:
      - test -f 'Dockerfile'
    env:
      DOCKERFILE_CONTENT: |
        FROM scratch

        COPY {{ .NAME }} /usr/bin/{{ .NAME }}

        ENTRYPOINT [ "/usr/bin/{{ .NAME }}" ]

        CMD {{ .DOCKER_CMD }}

  boilerplate:
    desc: Generate goreleaser configuration
    summary: |
      Generate goreleaser configuration.
      This configuration must be used as is and should not be modified.
      Any modification can be overwriting in the future.
      
      The generated file should be excluded from commits.
    vars:
      NAME: '{{ .NAME | default .DEFAULT_GORELEASER_NAME }}'
      DESCRIPTION: '{{ .DESCRIPTION | default .DEFAULT_GORELEASER_DESCRIPTION }}'
      GITHUB_OWNER: '{{ .GITHUB_OWNER | default .DEFAULT_GORELEASER_GITHUB_OWNER }}'
      GITHUB_REPOSITORY: '{{ .GITHUB_REPOSITORY | default .DEFAULT_GORELEASER_GITHUB_REPOSITORY }}'
      CONFIG_FILENAME: '{{ .CONFIG_FILENAME | default .DEFAULT_GORELEASER_CONFIG_FILENAME }}'
      DOCKER_REGISTRY: '{{ .DOCKER_REGISTRY | default .DEFAULT_GORELEASER_DOCKER_REGISTRY }}'
      DOCKER_CMD: '{{ .DOCKER_CMD | default .DEFAULT_GORELEASER_DOCKER_CMD }}'
      SOURCE: '{{ .SOURCE | default .DEFAULT_GORELEASER_SOURCE }}'
    cmds:
      - echo "${CONFIG_CONTENT}" > "{{.CONFIG_FILENAME}}"

    status:
      - test -f '{{ .CONFIG_FILENAME }}'
    env:
      CONFIG_CONTENT: |
        # THIS FILE HAS BEEN GENERATED BY THE COMMAND `{{.TASK}}`; DO NOT EDIT;
        # See also: .github/workflows/release.yml
        
        project_name: {{ .NAME }}
        
        release:
          github:
            owner: {{ .GITHUB_OWNER }}
            name: {{ .GITHUB_REPOSITORY }}
        
        # setups builds for linux and darwin on amd64 and arm64
        # https://goreleaser.com/customization/build
        builds:
          - env:
              - CGO_ENABLED=0
            goos:
              - linux
              - darwin
            goarch:
              - amd64
              - arm64
            main: ./cmd/{{ .GITHUB_REPOSITORY }}
            # ensures mod timestamp to be the commit timestamp
            mod_timestamp: '{{ "{{ .CommitTimestamp }}" }}'
            flags:
              # trims path
              - -trimpath
            ldflags:
              # use commit date instead of current date as main.date
              # only needed if you actually use those things in your main package, otherwise can be ignored.
              - -s -w -X main.version={{ "{{.Version}}" }} -X main.commit={{ "{{.Commit}}" }} -X main.date={{ "{{ .CommitDate }}" }} -X main.buildSource={{ "{{ .GitURL }}" }}
        
        # proxies from the go mod proxy before building
        # https://goreleaser.com/customization/gomod
        gomod:
          proxy: false
        
        # config the checksum filename
        # https://goreleaser.com/customization/checksum

        checksum:
          name_template: '{{"{{ .ProjectName }}"}}_{{"{{ .Version }}"}}-checksums.txt'
        
        # create a source tarball
        # https://goreleaser.com/customization/source/
        source:
          enabled: true
        
        # creates SBOMs of all archives and the source tarball using syft
        # https://goreleaser.com/customization/sbom
        sboms:
          - artifacts: archive
          - id: source # Two different sbom configurations need two different IDs
            artifacts: source
        
        # signs the checksum file
        # all files (including the sboms) are included in the checksum, so we don't need to sign each one if we don't want to
        # https://goreleaser.com/customization/sign
        signs:
          - cmd: cosign
            env:
              - COSIGN_EXPERIMENTAL=1
            certificate: '${artifact}.pem'
            args:
              - sign-blob
              - '--output-certificate=${certificate}'
              - '--output-signature=${signature}'
              - '${artifact}'
              - "--yes" # needed on cosign 2.0.0+
            artifacts: checksum
            output: true
        
        # create a docker image
        # https://goreleaser.com/customization/docker
        dockers:
          - image_templates:
              - '{{ .DOCKER_REGISTRY }}:{{ "{{ .Tag }}" }}'
            dockerfile: Dockerfile
            build_flag_templates:
              - "--pull"
              - "--label=org.opencontainers.image.created={{ "{{.Date}}" }}"
              - "--label=org.opencontainers.image.name={{ "{{.ProjectName}}" }}"
              - "--label=org.opencontainers.image.revision={{ "{{.FullCommit}}" }}"
              - "--label=org.opencontainers.image.version={{ "{{.Version}}" }}"
              - "--label=org.opencontainers.image.description={{ .DESCRIPTION }}"
              - "--label=org.opencontainers.image.source={{ .SOURCE }}"
        
        # signs our docker image
        # https://goreleaser.com/customization/docker_sign
        docker_signs:
          - cmd: cosign
            env:
              - COSIGN_EXPERIMENTAL=1
            artifacts: images
            output: true
            args:
              - 'sign'
              - '${artifact}'
              - "--yes" # needed on cosign 2.0.0+