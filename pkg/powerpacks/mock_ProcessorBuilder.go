// Code generated by mockery v2.46.3. DO NOT EDIT.

package powerpacks

import mock "github.com/stretchr/testify/mock"

// MockProcessorBuilder is an autogenerated mock type for the ProcessorBuilder type
type MockProcessorBuilder struct {
	mock.Mock
}

type MockProcessorBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessorBuilder) EXPECT() *MockProcessorBuilder_Expecter {
	return &MockProcessorBuilder_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: p
func (_m *MockProcessorBuilder) Execute(p *Powerpack) Processor {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 Processor
	if rf, ok := ret.Get(0).(func(*Powerpack) Processor); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Processor)
		}
	}

	return r0
}

// MockProcessorBuilder_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockProcessorBuilder_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - p *Powerpack
func (_e *MockProcessorBuilder_Expecter) Execute(p interface{}) *MockProcessorBuilder_Execute_Call {
	return &MockProcessorBuilder_Execute_Call{Call: _e.mock.On("Execute", p)}
}

func (_c *MockProcessorBuilder_Execute_Call) Run(run func(p *Powerpack)) *MockProcessorBuilder_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Powerpack))
	})
	return _c
}

func (_c *MockProcessorBuilder_Execute_Call) Return(_a0 Processor) *MockProcessorBuilder_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProcessorBuilder_Execute_Call) RunAndReturn(run func(*Powerpack) Processor) *MockProcessorBuilder_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessorBuilder creates a new instance of MockProcessorBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessorBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessorBuilder {
	mock := &MockProcessorBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
